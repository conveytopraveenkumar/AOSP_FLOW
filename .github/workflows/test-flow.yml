name: Fresh AOSP Build on EC2 with Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup_aosp:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Set EC2 Instance Details
        run: |
          echo "INSTANCE_ID=i-0c095a956111f7bb1" >> $GITHUB_ENV
          echo "INSTANCE_IP=13.48.47.239" >> $GITHUB_ENV

      - name: Setup SSH Key for EC2 Access
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem

      - name: Configure Swap Space (64GB)
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            sudo fallocate -l 64G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab
            sudo sysctl vm.swappiness=10
            echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf
          EOF

      - name: Install Docker on EC2
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            sudo apt update && sudo apt install -y docker.io
            sudo usermod -aG docker ubuntu
            newgrp docker
            sudo systemctl restart docker
          EOF

      - name: Create & Build AOSP Docker Image
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            mkdir -p /home/ubuntu/aosp && cd /home/ubuntu/aosp
            echo "FROM ubuntu:20.04" > Dockerfile
            echo "ENV DEBIAN_FRONTEND=noninteractive" >> Dockerfile
            echo "RUN apt update && apt install -y git curl python3 python3-pip openjdk-11-jdk wget unzip gcc g++ make libncurses5 libncurses5-dev bison flex gperf zip zlib1g-dev ccache lzop lsb-release sudo python-is-python3 tzdata" >> Dockerfile
            echo "RUN ln -fs /usr/share/zoneinfo/Asia/Kolkata /etc/localtime && dpkg-reconfigure --frontend noninteractive tzdata" >> Dockerfile
            echo "RUN mkdir -p ~/.bin && curl -o ~/.bin/repo https://storage.googleapis.com/git-repo-downloads/repo && chmod a+x ~/.bin/repo && ln -s ~/.bin/repo /usr/local/bin/repo" >> Dockerfile
            echo "WORKDIR /workspace" >> Dockerfile
            docker build -t doredlap/aosp-builder:latest .
            docker login -u "doredlap" -p "${{ secrets.DOCKER_HUB_PASSWORD }}"
            docker push doredlap/aosp-builder:latest
          EOF

      - name: Start AOSP Docker Container
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace doredlap/aosp-builder:latest
          EOF

      - name: Initialize Repo and Sync Source Code
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            docker exec aosp-container bash -c "
              rm -rf /workspace/.repo &&
              mkdir -p /workspace/logs
              repo init -u https://android.googlesource.com/platform/manifest -b android-14.0.0_r45
              repo sync -j\$(nproc) 2>&1 | tee /workspace/logs/repo_sync.log
            "
          EOF

      - name: Set Up Environment & Build AOSP
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            docker exec aosp-container bash -c "
              source build/envsetup.sh
              lunch aosp_cf_x86_64_tv-userdebug
              make -j\$(nproc) 2>&1 | tee /workspace/logs/build.log
            "
          EOF

      - name: Display Build Logs
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            cat /workspace/logs/build.log
          EOF
