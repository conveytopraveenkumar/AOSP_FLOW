name: AOSP Repo Setup on Existing EC2 with Docker Image Check

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup_aosp:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          
      - name: Set EC2 Instance Details
        run: |
          echo "INSTANCE_ID=i-0c24ee316ea82bcbf" >> $GITHUB_ENV
          echo "INSTANCE_IP=13.49.125.175" >> $GITHUB_ENV

      - name: Setup SSH Key for EC2 Access
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem

      - name: Install Docker on EC2
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            sudo apt update && sudo apt install -y docker.io
            sudo usermod -aG docker ubuntu
            newgrp docker
            sudo systemctl restart docker
          EOF

      - name: Check and Use Prebuilt Docker Image
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            IMAGE_EXISTS=\$(docker pull doredlap/aosp-builder:latest 2>&1 | grep 'not found')
            if [[ -z "\$IMAGE_EXISTS" ]]; then
              echo "Docker image found, running container..."
              docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace doredlap/aosp-builder:latest
            else
              echo "Docker image not found, building and pushing..."
              mkdir -p /home/ubuntu/aosp && cd /home/ubuntu/aosp
              echo "FROM ubuntu:20.04" > Dockerfile
              echo "RUN apt update && apt install -y git curl python3 python3-pip" >> Dockerfile
              echo "RUN mkdir -p /usr/local/bin && curl -o /usr/local/bin/repo https://storage.googleapis.com/git-repo-downloads/repo" >> Dockerfile
              echo "RUN chmod a+x /usr/local/bin/repo && ln -s /usr/local/bin/repo /usr/bin/repo" >> Dockerfile
              echo "WORKDIR /workspace" >> Dockerfile
              echo "COPY entrypoint.sh /entrypoint.sh" >> Dockerfile
              echo "RUN chmod +x /entrypoint.sh" >> Dockerfile
              echo "ENTRYPOINT [\"/entrypoint.sh\"]" >> Dockerfile
              echo "#!/bin/bash" > entrypoint.sh
              echo "exec tail -f /dev/null" >> entrypoint.sh
              chmod +x entrypoint.sh
              echo "Building Docker image..."
              docker build -t doredlap/aosp-builder:latest .
              echo "Pushing Docker image to Docker Hub..."
              docker login -u "doredlap" -p "${{ secrets.DOCKER_HUB_PASSWORD }}"
              docker push doredlap/aosp-builder:latest
              docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace/AOSP_BUILD doredlap/aosp-builder:latest
            fi
          EOF

      - name: Check if Docker Container Started Correctly
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            docker ps -a
            docker logs aosp-container
          EOF

      - name: Exec into Container and Run AOSP Repo Commands
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            echo "Executing repo commands inside container..."
            docker exec aosp-container bash -c "repo init -u https://android.googlesource.com/platform/manifest && repo sync"
          EOF
