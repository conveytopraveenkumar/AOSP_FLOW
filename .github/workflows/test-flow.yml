name: Fresh AOSP Build on EC2 with Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup_aosp:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials Using IAM Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::482037961672:role/GithubDeploymentRole
          aws-region: eu-north-1

      - name: Launch EC2 Instance 
        run: |
          UBUNTU_AMI_ID=$(aws ec2 describe-images --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' --output text)

          SUBNET_ID=$(aws ec2 describe-subnets --query 'Subnets[0].SubnetId' --output text)
          SG_ID=$(aws ec2 describe-security-groups --query 'SecurityGroups[0].GroupId' --output text)

          INSTANCE_ID=$(aws ec2 run-instances --image-id $UBUNTU_AMI_ID \
            --count 1 --instance-type t3.2xlarge \
            --key-name praveenkeyAWS \
            --security-group-ids $SG_ID \
            --subnet-id $SUBNET_ID \
            --block-device-mappings '[{"DeviceName": "/dev/sda1", "Ebs": {"VolumeSize": 500, "DeleteOnTermination": true}}]' \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Fresh_AOSP_Build}]' \
            --query "Instances[0].InstanceId" --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

          INSTANCE_NAME=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=Name" --query "Tags[0].Value" --output text)
          echo "INSTANCE_NAME=$INSTANCE_NAME" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to Start
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Ensure EC2 Instance Is Fully Initialized
        run: |
          while true; do
            INSTANCE_STATE=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceState.Name" --output text)
            SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)
            INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)

            echo "Current State: $INSTANCE_STATE | System Status: $SYSTEM_STATUS | Instance Status: $INSTANCE_STATUS"

            if [[ "$INSTANCE_STATE" == "running" && "$SYSTEM_STATUS" == "ok" && "$INSTANCE_STATUS" == "ok" ]]; then
              echo "Instance is fully initialized!"
              break
            fi
            sleep 10
          done

      - name: Setup SSH Key for EC2 Access
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem

      - name: Configure Swap Space (64GB)
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            sudo fallocate -l 64G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab
            sudo sysctl vm.swappiness=10
            echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf
          EOF

      - name: Install Docker on EC2
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            sudo apt update && sudo apt install -y docker.io
            sudo usermod -aG docker ubuntu
            newgrp docker
            sudo systemctl restart docker
          EOF

      - name: Check and Use Prebuilt Docker Image
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            IMAGE_EXISTS=\$(docker images -q doredlap/aosp-builder:1.2)
            if [ -n "\$IMAGE_EXISTS" ]; then
              echo "Docker image exists locally, running container..."
              docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace doredlap/aosp-builder:1.2
            else
              echo "Docker image not found, building and pushing..."
              mkdir -p /home/ubuntu/aosp && cd /home/ubuntu/aosp
              echo "FROM ubuntu:20.04" > Dockerfile
              echo "RUN apt update && apt install -y git curl python3 python3-pip openjdk-11-jdk wget unzip gcc g++ make libncurses5 libncurses5-dev bison flex gperf zip zlib1g-dev ccache lzop lsb-release sudo python-is-python3 tzdata" >> Dockerfile
              echo "WORKDIR /workspace" >> Dockerfile
              echo "COPY entrypoint.sh /entrypoint.sh" >> Dockerfile
              echo "RUN chmod +x /entrypoint.sh" >> Dockerfile
              echo "ENTRYPOINT [\"/entrypoint.sh\"]" >> Dockerfile
              echo "#!/bin/bash" > entrypoint.sh
              echo "exec tail -f /dev/null" >> entrypoint.sh
              chmod +x entrypoint.sh
              echo "Building Docker image..."
              docker build -t doredlap/aosp-builder:1.2 .
              echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "doredlap" --password-stdin
              docker push doredlap/aosp-builder:1.2
              docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace doredlap/aosp-builder:1.2
            fi
          EOF

      - name: Check if Docker Container Started Correctly
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@${INSTANCE_IP} << EOF
            docker ps -a
            docker logs aosp-container
          EOF
