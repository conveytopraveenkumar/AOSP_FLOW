name: AOSP Build on EC2 with SSM

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup_aosp:
    runs-on: ubuntu-latest
    timeout-minutes: 720
    outputs:
      instance_ip: ${{ env.INSTANCE_IP }}
      instance_id: ${{ env.INSTANCE_ID }}
    steps:
      - name: Export Build Number
        run: echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials Manually
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-north-1

      - name: Validate AWS Authentication
        run: |
          aws sts get-caller-identity

      - name: Launch EC2 Instance
        id: set_instance
        run: |
          UBUNTU_AMI_ID=$(aws ec2 describe-images --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' --output text)
          SUBNET_ID=$(aws ec2 describe-subnets --query 'Subnets[0].SubnetId' --output text)
          INSTANCE_ID=$(aws ec2 run-instances --image-id $UBUNTU_AMI_ID \
            --count 1 --instance-type c5.4xlarge \
            --key-name praveenkeyAWS \
            --security-group-ids sg-0b717514e2fcd22ce \
            --subnet-id $SUBNET_ID \
            --block-device-mappings '[{"DeviceName": "/dev/sda1", "Ebs": {"VolumeSize": 500, "DeleteOnTermination": true}}]' \
            --query "Instances[0].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to Start
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Validate IAM Role Association
        run: |
          IAM_PROFILE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].IamInstanceProfile.Arn" --output text)
          if [[ "$IAM_PROFILE" == *"GithubDeploymentRole"* ]]; then
            echo "✅ IAM Role GithubDeploymentRole is already attached."
          else
            echo "❌ IAM Role not attached! Associating now..."
            aws ec2 associate-iam-instance-profile --instance-id $INSTANCE_ID --iam-instance-profile Name="GithubDeploymentRole"
          fi

      - name: Configure Swap Space Using SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"instance-id","Values":["${{ env.INSTANCE_ID }}"]}]' \
            --parameters '{"commands":["sudo fallocate -l 64G /swapfile", "sudo chmod 600 /swapfile", "sudo mkswap /swapfile", "sudo swapon /swapfile", "echo \"/swapfile swap swap defaults 0 0\" | sudo tee -a /etc/fstab", "sudo sysctl vm.swappiness=10", "echo \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf"]}' \
            --region eu-north-1

      - name: Install Docker Using SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"instance-id","Values":["${{ env.INSTANCE_ID }}"]}]' \
            --parameters '{"commands":["sudo apt update && sudo apt install -y docker.io", "sudo usermod -aG docker ubuntu", "sudo systemctl restart docker"]}' \
            --region eu-north-1

      - name: Authenticate with GitHub Container Registry
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"instance-id","Values":["${{ env.INSTANCE_ID }}"]}]' \
            --parameters '{"commands":["echo \"${{ secrets.GHCR_PAT }}\" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin"]}' \
            --region eu-north-1

      - name: Repo Init & Sync Using SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"instance-id","Values":["${{ env.INSTANCE_ID }}"]}]' \
            --parameters '{"commands":["mkdir -p /workspace/logs", "echo \"Initializing repo...\"", "repo init -u https://android.googlesource.com/platform/manifest -b refs/tags/android-platform-14.0.0_r19", "echo \"Syncing repo...\"", "repo sync -c -j$(nproc) 2>&1 | tee /workspace/logs/repo_sync.log"]}' \
            --region eu-north-1
