name: AMINO CICD WORKFLOW

on:
  push:
    branches:
      - dev2
  workflow_dispatch:

permissions:
  id-token: write

jobs:
  Environment_to_launch_setup:
    runs-on: ubuntu-latest
    timeout-minutes: 720

    steps:
      - name: Export Build Number
        run: echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=eu-north-1" >> ~/.aws/config
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-north-1

      - name: Validate AWS Authentication
        run: aws sts get-caller-identity

      - name: Launch EC2 Instance with IAM Role
        id: set_instance
        run: |
          INSTANCE_NAME="AOSP-Build-Instance-$(date +%Y%m%d%H%M%S)"
          UBUNTU_AMI_ID=$(aws ec2 describe-images --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' --output text)
          SUBNET_ID=$(aws ec2 describe-subnets --query 'Subnets[0].SubnetId' --output text)
          INSTANCE_ID=$(aws ec2 run-instances --image-id $UBUNTU_AMI_ID \
            --count 1 --instance-type c5.4xlarge \
            --key-name praveenkeyAWS \
            --security-group-ids sg-0b717514e2fcd22ce \
            --subnet-id $SUBNET_ID \
            --iam-instance-profile Name=GithubDeploymentRole \
            --block-device-mappings '[{"DeviceName": "/dev/sda1", "Ebs": {"VolumeSize": 500, "DeleteOnTermination": true}}]' \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=$INSTANCE_NAME}]" \
            --query "Instances[0].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to Start
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Install AWS CLI in EC2 via SSM
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"InstanceIds","Values":["'"$INSTANCE_ID"'"]}]' \
            --parameters '{"commands":["sudo snap install aws-cli --classic", "aws --version"]}' \
            --region eu-north-1 \
            --query "Command.CommandId" --output text)
          echo "SSM COMMAND_ID=$COMMAND_ID"

      - name: Wait for AWS CLI Installation Completion
        run: |
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --query "Status" --output text)
            echo "SSM Command Status: $STATUS"
            if [[ "$STATUS" == "Success" ]]; then
              echo "AWS CLI installed successfully inside EC2!"
              break
            fi
            sleep 10
          done

      - name: Check if Instance is Registered with AWS SSM
        run: |
          ATTEMPTS=0
          while [[ $ATTEMPTS -lt 30 ]]; do
            STATUS=$(aws ssm describe-instance-information --query "InstanceInformationList[*].InstanceId" --region eu-north-1 | grep $INSTANCE_ID)
            if [[ -n "$STATUS" ]]; then
              echo "Instance is recognized by AWS SSM!"
              break
            fi
            echo "Waiting for instance to be registered with AWS SSM... (Attempt $ATTEMPTS)"
            sleep 10
            ((ATTEMPTS++))
          done || { echo "Error: Instance not registered with AWS SSM."; exit 1; }

      - name: Ensure EC2 Instance Is Fully Initialized
        run: |
          while true; do
            INSTANCE_STATE=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceState.Name" --output text)
            SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)
            INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)
            echo "Current State: $INSTANCE_STATE | System Status: $SYSTEM_STATUS | Instance Status: $INSTANCE_STATUS"
            if [[ "$INSTANCE_STATE" == "running" && "$SYSTEM_STATUS" == "ok" && "$INSTANCE_STATUS" == "ok" ]]; then
              echo "Instance is fully initialized!"
              break
            fi
            sleep 10
          done

      - name: Run Setup Commands via AWS SSM
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"InstanceIds","Values":["'"$INSTANCE_ID"'"]}]' \
            --parameters '{"commands":[
              "sudo apt update && sudo apt install -y git curl python3",
              "sudo fallocate -l 64G /swapfile",
              "sudo chmod 600 /swapfile",
              "sudo mkswap /swapfile",
              "sudo swapon /swapfile",
              "echo \"/swapfile swap swap defaults 0 0\" | sudo tee -a /etc/fstab",
              "sudo sysctl vm.swappiness=10",
              "echo \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf",
              "mkdir -p ~/bin",
              "curl -o ~/bin/repo https://storage.googleapis.com/git-repo-downloads/repo",
              "chmod a+x ~/bin/repo",
              "echo \"export PATH=~/bin:$PATH\" >> ~/.bashrc",
              "source ~/.bashrc",
              "sudo mkdir -p /home/ubuntu/AOSP/logs",
              "sudo chmod -R 777 /home/ubuntu/AOSP",
              "sudo touch /home/ubuntu/AOSP/logs/repo_sync.log",
              "cd /home/ubuntu/AOSP",
              "repo init -u https://android.googlesource.com/platform/manifest -b refs/tags/android-platform-14.0.0_r19",
              "repo sync -c -j$(nproc)"
            ]}' \
            --region eu-north-1 \
            --query "Command.CommandId" --output text)
          echo "SSM COMMAND_ID=$COMMAND_ID"

      - name: Wait for SSM Command Completion
        run: |
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --query "Status" --output text)
            echo "SSM Command Status: $STATUS"
            if [[ "$STATUS" == "Success" ]]; then
              echo "SSM commands executed successfully!"
              break
            fi
            sleep 10
          done
