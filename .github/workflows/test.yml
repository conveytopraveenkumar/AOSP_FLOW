name: AOSP Build on EC2 with Docker JOBS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup_aosp:
    runs-on: ubuntu-latest
    timeout-minutes: 660
    outputs:
      instance_ip: ${{ steps.set_instance_ip.outputs.INSTANCE_IP }}
      instance_id: ${{ steps.set_instance_id.outputs.INSTANCE_ID }}

    steps:
      - name: Export Build Number
        run: echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials Manually
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region eu-north-1

      - name: Validate AWS Authentication
        run: aws sts get-caller-identity

      # - name: Create Security Group & Allow SSH
      #   id: set_sg
      #   run: |
      #     VPC_ID=$(aws ec2 describe-vpcs --query 'Vpcs[0].VpcId' --output text)
      #     SG_ID=$(aws ec2 create-security-group --group-name AOSP_SG --description "Security group for AOSP build" --vpc-id $VPC_ID --query 'GroupId' --output text)
      #     aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
      #     echo "SG_ID=$SG_ID" >> $GITHUB_ENV

      - name: Launch EC2 Instance
        id: set_instance_id
        run: |
          UBUNTU_AMI_ID=$(aws ec2 describe-images --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' --output text)
          SUBNET_ID=$(aws ec2 describe-subnets --query 'Subnets[0].SubnetId' --output text)

          INSTANCE_ID=$(aws ec2 run-instances --image-id $UBUNTU_AMI_ID \
            --count 1 --instance-type c5.4xlarge \
            --key-name praveenkeyAWS \
            --security-group-ids sg-0374a1b47b874983d \
            --subnet-id $SUBNET_ID \
            --block-device-mappings '[{"DeviceName": "/dev/sda1", "Ebs": {"VolumeSize": 500, "DeleteOnTermination": true}}]' \
            --query "Instances[0].InstanceId" --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to Start
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Fetch Public IP of EC2 Instance
        id: set_instance_ip
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

      - name: Wait for SSH Connectivity
        run: |
          for i in {1..10}; do
            nc -zv $INSTANCE_IP 22 && break || sleep 10
          done

      - name: Setup SSH Key for EC2 Access
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem

      - name: Configure Swap Space
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@${INSTANCE_IP} << "EOF"
            sudo fallocate -l 64G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab
            sudo sysctl vm.swappiness=10
            echo 'vm.swappiness=10' | sudo tee -a /etc/sysctl.conf
          EOF
      - name: Install Docker on EC2
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@${INSTANCE_IP} << "EOF"
            sudo apt update && sudo apt install -y docker.io
            sudo usermod -aG docker ubuntu
            sudo systemctl restart docker
          EOF
      - name: Authenticate with GitHub Container Registry
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text) << EOF
            echo "${{ secrets.GHCR_PAT   }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
          EOF
      - name: Authenticate with GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_PAT   }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
      - name: Check and Use Prebuilt Docker Image
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text) << 'EOF'
            set -e  # Stop execution on failure
            echo "Checking if Docker image exists in GHCR..."
            
            docker pull ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0 || IMAGE_NOT_FOUND="true"
           if [[ -z "$IMAGE_NOT_FOUND" ]]; then
              echo "✅ Docker image found in GHCR, running container..."
              docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0
            else
              echo "⚠️ Docker image not found, building and pushing to GHCR..."
              mkdir -p /home/ubuntu/aosp && cd /home/ubuntu/aosp
              
              echo "FROM ubuntu:20.04" > Dockerfile
              echo "ENV DEBIAN_FRONTEND=noninteractive" >> Dockerfile
              echo "RUN apt update && apt install -y git curl python3 python3-pip openjdk-11-jdk wget unzip gcc g++ make libncurses5 libncurses5-dev bison flex gperf zip zlib1g-dev ccache lzop lsb-release sudo python-is-python3" >> Dockerfile
              
              # Ensure timezone configuration runs before installing tzdata
              echo "RUN ln -fs /usr/share/zoneinfo/Asia/Kolkata /etc/localtime" >> Dockerfile
              echo "RUN echo 'Asia/Kolkata' > /etc/timezone" >> Dockerfile
              echo "RUN apt update && apt install -y tzdata" >> Dockerfile
              echo "RUN dpkg-reconfigure --frontend noninteractive tzdata" >> Dockerfile
              echo "RUN apt update && sudo apt install -y ninja-build rsync awscli" >> Dockerfile
              
              # Install repo and setup environment
              echo "RUN mkdir -p /usr/local/bin && curl -o /usr/local/bin/repo https://storage.googleapis.com/git-repo-downloads/repo" >> Dockerfile
              echo "RUN chmod a+x /usr/local/bin/repo && ln -s /usr/local/bin/repo /usr/bin/repo" >> Dockerfile
              
              echo "WORKDIR /workspace" >> Dockerfile
              echo "COPY entrypoint.sh /entrypoint.sh" >> Dockerfile
              echo "RUN chmod +x /entrypoint.sh" >> Dockerfile
              echo "ENTRYPOINT [\"/entrypoint.sh\"]" >> Dockerfile
              
              echo "#!/bin/bash" > entrypoint.sh
              echo "exec tail -f /dev/null" >> entrypoint.sh
              chmod +x entrypoint.sh
              
              echo "Building Docker image..."
              docker build -t ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0 . || {
                  echo "❌ Failed to build Docker image!"
                  exit 1
              }
              echo "Pushing Docker image to GHCR..."
              docker push ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0 && echo "✅ Image successfully pushed!"
              echo "Running newly built container..."
              docker run -d --name aosp-container --restart unless-stopped -v /home/ubuntu/aosp:/workspace ghcr.io/${{ github.repository_owner }}/aosp-build-docker:1.0
            fi
          EOF
      - name: Ensure Log Directory Exists
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@${INSTANCE_IP} << EOF
            sudo mkdir -p /workspace/logs
            sudo chmod -R 777 /workspace
            sudo touch /workspace/logs/repo_sync.log
          EOF
      - name: Repo Init & Sync
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes -o ConnectTimeout=30 ubuntu@${INSTANCE_IP} << EOF
            docker exec aosp-container bash -c "
              rm -rf /workspace/.repo &&
              mkdir -p /workspace/logs
              echo 'Initializing repo...'
              repo init -u https://android.googlesource.com/platform/manifest -b refs/tags/android-platform-14.0.0_r19
              echo 'Syncing repo...'
               for i in {1..3}; do
                repo sync -c -j$(nproc) 2>&1 | tee /workspace/logs/repo_sync.log && break || sleep 10
              done
            "
          EOF
  build_aosp:
    needs: setup_aosp
    runs-on: ubuntu-latest
    timeout-minutes: 720
    steps:
      - name: Configure SSH Key for EC2 Access
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem
  
      - name: Set Up Environment & Build AOSP
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@${{ needs.setup_aosp.outputs.instance_ip }} << "EOF"
            docker exec aosp-container bash -c "
              if [ ! -d /workspace/.repo ]; then
                echo 'Error: Repo sync may have failed. .repo directory not found.'
                exit 1
              fi
  
              if [ -f build/envsetup.sh ]; then
                source build/envsetup.sh
                lunch aosp_cf_x86_64_tv-userdebug
                make dist -j\$(nproc) 2>&1 | tee /workspace/logs/build.log || {
                  echo 'Error: AOSP build failed!'
                  exit 1
                }
              else
                echo 'Error: build/envsetup.sh not found!'
                exit 1
              fi
            "
          EOF
  
      - name: Set Build Number
        run: |
          echo "BUILD_NUMBER=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
      
      - name: Upload Build Files to S3 with Build Number
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@${{ needs.setup_aosp.outputs.instance_ip }} << EOF
            docker exec -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
                        -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                        -e AWS_DEFAULT_REGION="eu-north-1" \
                        -e BUILD_NUMBER="${{ env.BUILD_NUMBER }}" \
                        aosp-container bash -c "
              cd /workspace/out/dist/
              # Upload files securely with error handling
              aws s3 cp cvd-host_package.tar.gz s3://piplineflow/build_\$BUILD_NUMBER/ || { echo '❌ Error uploading cvd-host_package.tar.gz'; exit 1; }
              aws s3 cp aosp_cf_x86_64_tv-img-eng* s3://piplineflow/build_\$BUILD_NUMBER/ || { echo '❌ Error uploading aosp_cf_x86_64_tv-img-eng*'; exit 1; }
      
              echo '✅ Build files successfully uploaded to S3 under folder build_\$BUILD_NUMBER!'
            "
          EOF

      - name: Stop EC2 Instance After Build Completion
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -o TCPKeepAlive=yes ubuntu@${{ needs.setup_aosp.outputs.instance_ip }} << EOF
            INSTANCE_ID=${{ needs.setup_aosp.outputs.instance_id }}
      
            if [ -z "$INSTANCE_ID" ]; then
              echo "❌ Error: INSTANCE_ID is empty!"
              exit 1
            fi
      
            # Install AWS CLI if missing
            if ! command -v aws >/dev/null 2>&1; then
              sudo apt update && sudo apt install -y awscli
            fi
      
            # Configure AWS credentials manually with validation
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            aws configure set region "eu-north-1"
      
            # Validate AWS authentication before stopping the instance
            aws sts get-caller-identity || { echo '❌ Error: AWS authentication failed!'; exit 1; }
      
            # Stop and confirm EC2 shutdown with error handling
            aws ec2 stop-instances --instance-ids "$INSTANCE_ID" || { echo '❌ Error stopping EC2 instance!'; exit 1; }
            aws ec2 wait instance-stopped --instance-ids "$INSTANCE_ID"
      
            echo "✅ Instance $INSTANCE_ID has been successfully stopped!"
          EOF
